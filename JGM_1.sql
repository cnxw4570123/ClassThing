/* 22/09/07 */
/*
CREATE : INSERT

READ : SELECT

UPDATE : UPDATE

DELETE : DELETE

*/

CREATE TABLE INSERT_TEST(
    NUMBER_COL NUMBER,
    NVARCHAR2_COL NVARCHAR2(10),
    DATE_COL DATE
);

--INSERT INTO 테이블명(컬럼명1, 컬럼명2, .....) VALUES(컬럼1 입력값, 컬럼2 입력값, ....);
INSERT INTO INSERT_TEST(NUMBER_COL, NVARCHAR2_COL, DATE_COL) VALUES(1, '문자열', '2022-09-07 17:26:30');
-- 1 행 이(가) 삽입되었습니다.
INSERT INTO INSERT_TEST(NUMBER_COL, NVARCHAR2_COL, DATE_COL) 
VALUES(2, '문자열2', TO_DATE('2022-09-07 17:30', 'YYYY-MM-DD HH24:MI'));
/* TO_DATE('문자데이터', '문자데이터형식) */

SELECT * FROM INSERT_TEST;

/* CREATE DROP ALTER등의 명령어 INSERT, SELECT, UPDATE, DELETE, GRANT, MODIFY 등 
DDL = 데이터 정의어 -> 객체를 생성하는 언어 CREATE, ALTER, DROP -> 객체 만들고 조정, 삭제 등
DML = 데이터 조작어 ->  객체를 조작하는 언어(데이터 삭제 ) -> SECECT, UPDATE, DELETE가 있다.
DCL = 데이터 통제어 -> 주로 데이터 사용 권한과 관련된 명령어로 GRANT, REVOKE가 있다.
*/

DROP TABLE DEPT;
CREATE TABLE DEPT
       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
	DNAME VARCHAR2(14) ,
	LOC VARCHAR2(13) ) ;
DROP TABLE EMP;
CREATE TABLE EMP
       (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);
INSERT INTO DEPT VALUES
	(10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES
	(30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES
	(40,'OPERATIONS','BOSTON');
INSERT INTO EMP VALUES
(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);
INSERT INTO EMP VALUES
(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);
INSERT INTO EMP VALUES
(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);
INSERT INTO EMP VALUES
(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);
INSERT INTO EMP VALUES
(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);
INSERT INTO EMP VALUES
(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);
INSERT INTO EMP VALUES
(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);
INSERT INTO EMP VALUES
(7788,'SCOTT','ANALYST',7566,to_date('13-JUL-87')-85,3000,NULL,20);
INSERT INTO EMP VALUES
(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO EMP VALUES
(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);
INSERT INTO EMP VALUES
(7876,'ADAMS','CLERK',7788,to_date('13-JUL-87')-51,1100,NULL,20);
INSERT INTO EMP VALUES
(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);
INSERT INTO EMP VALUES
(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO EMP VALUES
(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);
DROP TABLE BONUS;
CREATE TABLE BONUS
	(
	ENAME VARCHAR2(10)	,
	JOB VARCHAR2(9)  ,
	SAL NUMBER,
	COMM NUMBER
	) ;
DROP TABLE SALGRADE;
CREATE TABLE SALGRADE
      ( GRADE NUMBER,
	LOSAL NUMBER,
	HISAL NUMBER );
INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);
COMMIT;

/* EMP(직원정보) 테이블 */
SELECT * FROM EMP;
/* DEP(부서정보) 테이블 */
SELECT * FROM DEPT;

/* 
SELECT 조회할 컬럼명1, 조회할 컬럼명2, ....
FROM 조회할 테이블명
WHERE 조회할 조건 AND/OR 조회할 조건2
GROUP BY 그룹으로 나눌 컬럼명
HAVING 그룹에 대한 조건
ORDER BY 정렬방식
*/

SELECT *
FROM EMP
WHERE ENAME = 'SMITH';

SELECT ENAME, SUM(SAL)
FROM EMP
GROUP BY ENAME;

SELECT *
FROM EMP
ORDER BY ENAME ASC;

/* EMP테이블에서 직원이름(ENAME), 직무(JOB) 조회*/

SELECT ENAME, JOB, SAL
FROM EMP
WHERE SAL > 1000
ORDER BY SAL DESC
;

/* 컬럼에 별칭 */
SELECT ENAME AS 직원이름, JOB AS "직무", SAL 급여, DEPTNO "부서번호"
FROM EMP;

/*
1. 컬럼명 AS 별칭
2. 컬럼명 AS "별칭"
3. 컬럼명 별칭
4. 컬럼명 "별칭"
String sql = "SELECT ENAME AS 직원이름, JOB AS \"직무\" SAL 급여, DEPTNO \"부서번호\" FROM EMP";

*/


/* WHERE 조건절 */
-- 부서번호 20번인 직원들을 이름, 직무를 조회
SELECT ENAME, JOB
FROM EMP
WHERE DEPTNO = 20;

-- 급여가 1000이상인 직원의 이름, 직무, 급여, 부서번호 조회

SELECT ENAME, JOB, SAL, DEPTNO, HIREDATE
FROM EMP
WHERE SAL >= 1000
ORDER BY SAL DESC;

-- 부서번호가 20번이고, 급여가 1000이상인 직원의 이름, 직무, 급여, 부서번호 조회

SELECT ENAME, JOB, SAL, DEPTNO, HIREDATE
FROM EMP
WHERE SAL >= 1000 AND DEPTNO = 20
ORDER BY SAL DESC;

SELECT ENAME, JOB, SAL, DEPTNO, HIREDATE
FROM EMP
WHERE SAL >= 1000 OR DEPTNO = 20
ORDER BY SAL ASC;

--급여가 1000이상 2000 이하인 직원들의 정보를 조회
SELECT *
FROM EMP
WHERE SAL >= 1000 AND SAL <= 2000
ORDER BY SAL ASC;

-- WHERE 조건절 문자열
-- 직원 이름이 SMITH인 직원의 정보 조회
SELECT *
FROM EMP
WHERE ENAME = 'SMITH';

-- 직원 이름이 S로 시작하는 직원의 정보를 조회

SELECT *
FROM EMP
WHERE ENAME LIKE 'S%';

/*와일드 문자, 와일드 연산자
1. _ -> 한 글자만 대체
2. % -> 여러 글자 대체
*/

-- 직원 이름에 L이 포함되는 직원의 정보를 조회
SELECT * FROM EMP
WHERE ENAME LIKE '%L%';


-- 직원 이름이 N로 시작하는 직원의 정보를 조회
SELECT * FROM EMP
WHERE ENAME LIKE '%N';

-- 직원 이름이 5글자인 N으로 끝나는 직원의 정보
SELECT * FROM EMP
WHERE ENAME LIKE '____N';

-- 이름이 5글자인 직원 중 두 번째 글자가 'O'인 직원의 정보
SELECT * FROM EMP
WHERE ENAME LIKE '_O___';

/* 날짜 */
-- 입사일이 1981년 11월 17일인 직원의 정보를 조회
SELECT *
FROM EMP
WHERE HIREDATE = '1981-11-17';

UPDATE EMP
SET HIREDATE = TO_DATE('1981-11-17 20:48', 'YYYY-MM-DD HH24:MI')
WHERE EMPNO = 7839;

SELECT *FROM EMP;
ROLLBACK;


-- TO_CHAR() 날짜 >> 문자
SELECT HIREDATE
FROM EMP;

SELECT *
FROM EMP
WHERE TO_CHAR(HIREDATE, 'YYYY') = '1982';

SELECT *
FROM EMP
WHERE TO_CHAR(HIREDATE, 'YYYY-MM-DD') >= '1981-06-09';

SELECT *
FROM EMP
WHERE HIREDATE >= '1981-06-09 00:00';

SELECT *
FROM EMP
WHERE HIREDATE >= TO_DATE('1981-06-09', 'YYYY-MM-DD')
ORDER BY HIREDATE ASC;

-- 부서번호가 30번, 이름이 5글자인 직원 중에서 입사일 1981년 5월 이후인 직원들의 정보 조회

SELECT *
FROM EMP
WHERE DEPTNO = 30 AND ENAME LIKE '_____' AND TO_CHAR(HIREDATE, 'YYYY-MM') >= '1981-05';

SELECT *
FROM EMP
WHERE DEPTNO = 30 AND ENAME LIKE '_____' AND HIREDATE >= TO_DATE('1981-05', 'YYYY-MM');





